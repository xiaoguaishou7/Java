#类、方法和变量修饰符:
abstract	    声明抽象
class	        类
extends	      扩充,继承
final	        最终值,不可改变的
implements	  实现（接口）
interface	    接口
native	      本地，原生方法（非 Java 实现）
new	          新,创建
static	      静态
strictfp	    严格,精准
synchronized	线程,同步
transient	    短暂
volatile	    易失

#错误处理:
assert	断言表达式是否为真
catch	  捕捉异常
finally	有没有异常都执行
throw	  抛出一个异常对象
throws	声明一个异常可能被抛出
try	    捕获异常

#基本类型:
boolean	布尔型
byte	  字节型
char	  字符型
double	双精度浮点
float	  单精度浮点
int	    整型
long	  长整型
short	  短整型

#变量引用:
super	父类,超类
this	本类
void	无返回值

#构造方法
每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。

在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。

下面是一个构造方法示例：

public class Puppy{
    public Puppy(){
    }
 
    public Puppy(String name){
        // 这个构造器仅有一个参数：name
    }
}

#创建对象
对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：

声明：声明一个对象，包括对象名称和对象类型。
实例化：使用关键字 new 来创建一个对象。
初始化：使用 new 创建对象时，会调用构造方法初始化对象。

#类型转化
低  ------------------------------------>  高
byte,short,char—> int —> long—> float —> double 
自动类型转换：
必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。

强制类型转换：
转换过程中可能导致溢出或损失精度，例如：

int i =128;   
byte b = (byte)i;
因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。

#Java变量类型
Java语言支持的变量类型有：

类变量：独立于方法之外的变量，用 static 修饰。  //类变量就是说它可以不通过对象来访问，可以直接访问
实例变量：独立于方法之外的变量，不过没有 static 修饰。
局部变量：类的方法中的变量。
例子：
public class Variable{
    static int allClicks=0;    // 类变量
 
    String str="hello world";  // 实例变量
 
    public void method(){
 
        int i = 0;  // 局部变量
 
    }
}








